// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source=app/domain/usecase/usecase.go -destination=app/tests/mocks/mock_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/leonardo-gmuller/go-weather/app/domain/dto"
	usecase "github.com/leonardo-gmuller/go-weather/app/domain/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCaseInterface interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockUseCase) GetAddress(ctx context.Context, zipcode string) (*usecase.AddressResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", ctx, zipcode)
	ret0, _ := ret[0].(*usecase.AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockUseCaseMockRecorder) GetAddress(ctx, zipcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockUseCase)(nil).GetAddress), ctx, zipcode)
}

// GetWeather mocks base method.
func (m *MockUseCase) GetWeather(ctx context.Context, address dto.Address) (*usecase.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", ctx, address)
	ret0, _ := ret[0].(*usecase.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather.
func (mr *MockUseCaseMockRecorder) GetWeather(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockUseCase)(nil).GetWeather), ctx, address)
}
